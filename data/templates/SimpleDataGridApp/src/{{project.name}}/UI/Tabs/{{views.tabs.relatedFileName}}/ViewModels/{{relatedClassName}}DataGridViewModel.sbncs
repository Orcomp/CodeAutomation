using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using Catel.Configuration;
using Catel.IoC;
using Catel.Linq;
using Catel.Services;
using Gum;
using Gum.Controls;
using Gum.Controls.Adapters;
using Gum.Controls.Services;
using Gum.Controls.ViewModels;
using Gum.Projects;
using Gum.Projects.Controls.Configuration;
using Gum.Services;
using Orc.FilterBuilder;
using Orc.ProjectManagement;
using Orc.Theming;
using {{root.project.name}}.Data.ProjectManagement;

namespace {{root.project.name}}.UI.ViewModels;

public class {{relatedClassName}}DataGridViewModel : IntegratedDataGridViewModelBase<Project, Data.Models.{{relatedClassName}}>
{
    private readonly DataGridConfiguration<Data.Models{{relatedClassName}}> _defaultConfiguration =
        CreateDataGridConfiguration();

    public {{relatedClassName}}DataGridViewModel(DataGridContext context, IProjectManager projectManager,
        IProjectStateService projectStateService,
        IFilterService filterService, IDispatcherService dispatcherService,
        IProjectDataGridService projectDataGridService, ITabService tabService,
        IAccentColorService accentColorService, IConfigurationService configurationService, IScopeManager scopeManager,
        IServiceLocator serviceLocator)
        : base(context, projectManager, projectStateService, filterService, dispatcherService, projectDataGridService,
            tabService, accentColorService,
            configurationService, scopeManager, serviceLocator)
    {
    }

    protected override Task InitializeAsync()
    {
        return base.InitializeAsync();
    }

    protected override Task CloseAsync()
    {
        return base.CloseAsync();
    }

    protected override void OnInteractionUpdated(IDataGridInteraction oldInteraction, IDataGridInteraction newInteraction)
    {
        base.OnInteractionUpdated(oldInteraction, newInteraction);
    }

    protected override IPropertyProvider GetPropertyProvider() => _defaultConfiguration.PropertyProvider;
    protected override ISettingsAdapter GetSettingsAdapter() => _defaultConfiguration.SettingsAdapter;

    protected override string GetTabScope()
    {
        return ScopeNames.relatedClassName;
    }

    protected override async Task<IList<Data.Models.{{relatedClassName}}>> GetProjectRecordsAsync(Project project)
    {
        return project?.MasterData.{{relatedClassName}}.ToList() ?? new List<Data.Models.{{relatedClassName}}>(0);
    }

    protected override async void InitializeDataGrid(IDataGridInteraction interaction)
    {
        base.InitializeDataGrid(interaction);

        interaction.ApplyDefaultDataGridConfiguration(_defaultConfiguration);
    }

    private static DataGridConfiguration<Data.Models.{{relatedClassName}}> CreateDataGridConfiguration()
    {
        var dataGridConfiguration = new DataGridConfiguration<Data.Models.{{relatedClassName}}>()
            .SummaryRowLocation(RowGroupDetailsMode.Top)
            .StickyRowHeaders(true);
{{ for dataGrid in content.dataGrid
    for column in dataGrid.Columns}}
        dataGridConfiguration.AddColumn(x => x.{{column.relatedPropertyName}});
{{end
    end}}
        return dataGridConfiguration;
    }

}

