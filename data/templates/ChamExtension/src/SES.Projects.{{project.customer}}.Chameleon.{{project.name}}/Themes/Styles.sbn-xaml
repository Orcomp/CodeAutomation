<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:catel="http://schemas.catelproject.com"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:orccontrols="http://schemas.wildgums.com/orc/controls"
                    xmlns:factoryPlanning="clr-namespace:SES.Projects.{{root.project.customer}}.Chameleon.{{root.project.name}}"
                    xmlns:converters="clr-namespace:SES.Projects.{{root.project.customer}}.Chameleon.{{root.project.name}}.Converters"
                    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Orchestra.Core;component/themes/generic.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="GroupViewGridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Width" Value="5" />
        <Setter Property="Margin" Value="0,0,0,6" />
    </Style>

    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="WhiteSmoke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Margin" Value="6,0,6,6" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}"/>
    </Style>

    <Style x:Key="ButtonWithIconStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Chrome" BorderThickness="0" SnapsToDevicePixels="True">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Chrome" Value="{DynamicResource AccentColorBrush4}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Chrome" Value="{DynamicResource AccentColorBrush}"/>
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="BorderBrush" TargetName="Chrome" Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FFADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GroupImageStyle" TargetType="{x:Type Image}">
        <Setter Property="Width" Value="32" />
        <Setter Property="Height" Value="32" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style x:Key="GroupTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="30" />
        <Setter Property="MaxWidth" Value="30" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Center" />
    </Style>

    <Style x:Key="DefaultTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="4,6,4,6" />
    </Style>

    <Style x:Key="HeaderTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DefaultTextBlockStyle}">
        <Setter Property="FontSize" Value="20" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="SubHeaderTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DefaultTextBlockStyle}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="ColorBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="4,0,4,0" />
        <Setter Property="Width" Value="10" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="AnimatingItemsControl" TargetType="{x:Type ItemsControl}">
        <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected, Converter={catel:BooleanToHidingVisibilityConverter}}" />
        <Setter Property="Opacity" Value="0" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleY="0" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard SpeedRatio="25">
                            <DoubleAnimation BeginTime="0:0:0" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="1.0" Duration="0:0:3">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase Power="3" EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation BeginTime="0:0:6" Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:4" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard  SpeedRatio="25">
                            <DoubleAnimation BeginTime="0:0:0" Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:4" />
                            <DoubleAnimation BeginTime="0:0:5" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="0.0" Duration="0:0:3">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase Power="3" EasingMode="EaseIn" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--LinkLabel-->
    <Style x:Key="LinkLabelStyle" TargetType="{x:Type orccontrols:LinkLabel}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="#575757"/>
        <Setter Property="HoverForeground" Value="{DynamicResource AccentColorBrush}"/>

        <Setter Property="HyperlinkStyle">
            <Setter.Value>
                <Style TargetType="Hyperlink">
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"/>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HoverForeground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type orccontrols:LinkLabel}">
                    <Border Background="{TemplateBinding Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="true">
                        <TextBlock Background="{TemplateBinding Background}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <Hyperlink x:Name="PART_InnerHyperlink" TextDecorations="None"
                                                NavigateUri="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=Url}"
                                                Style= "{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=HyperlinkStyle}"
                                                Command="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=Command}"
                                                CommandParameter="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=CommandParameter}"
                                                CommandTarget="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=CommandTarget}">
                                        <orccontrols:BindableRun BoundText="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=Content}"/>
                                    </Hyperlink>
                        </TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="LinkLabelBehavior" Value="NeverUnderline">
                            <Setter TargetName="PART_InnerHyperlink" Property="TextDecorations"  Value="None"/>
                        </Trigger>
                        <Trigger Property="LinkLabelBehavior" Value="AlwaysUnderline">
                            <Setter TargetName="PART_InnerHyperlink" Property="TextDecorations" Value="Underline"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="LinkLabelBehavior" Value="HoverUnderline"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_InnerHyperlink" Property="TextDecorations" Value="Underline"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false"/>
                                <Condition Property="LinkLabelBehavior" Value="HoverUnderline"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_InnerHyperlink" Property="TextDecorations" Value="None"/>
                        </MultiTrigger>
                        <Trigger SourceName="PART_InnerHyperlink" Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>