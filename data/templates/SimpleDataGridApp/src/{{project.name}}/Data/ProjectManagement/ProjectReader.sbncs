using System.IO;
using System.Threading.Tasks;
using Catel;
using Catel.Configuration;
using Gum.ProjectManagement;
using Gum.Projects.Services;
using Orc.FileSystem;
using Orc.ProjectManagement;
using {{root.project.name}}.Data.Models;
using {{root.project.name}}.Data.Models.Maps;
using ProjectReaderBase = Gum.ProjectManagement.ProjectReaderBase;

namespace {{root.project.name}}.Data.ProjectManagement;

public class ProjectReader : ProjectReaderBase
{
    private readonly IProjectSerializationService _projectSerializationService;

    public ProjectReader(IDirectoryService directoryService, IFileService fileService, IProjectSettingsSerializationService projectSettingsSerializationService,
        IConfigurationService configurationService, IProjectSerializationService projectSerializationService)
        : base(directoryService, fileService, projectSettingsSerializationService, configurationService)
    {
        Argument.IsNotNull(() => projectSerializationService);

        _projectSerializationService = projectSerializationService;
    }

    protected override async Task<IProject> ReadFromLocationAsync(string location, ProjectSettings projectSettings)
    {
        var project = new Project(location);

{{ for csvFile in csvList
		property = csvFile.file 
        type = csvFile.className}}
		var {{csvFile.file}}File = Path.Combine(location, FileNames.{{csvFile.file}});
        project.MasterData.{{property}} = _projectSerializationService.LoadRecords<{{type}}, {{type}}Map>({{csvFile.file}}File);
{{end}}	
        return project;
    }
}
